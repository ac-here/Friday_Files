function detections = make_deletion_or_selection(...
                                    Time, Input_Signal, ...
                                    Index_Signal_Window, ...
                                    Index_Detections_ROI, ... 
                                    detections, signal_type, ...
                                    Index_Location)
                                
    % Find the index of the ROI  
    Input_Signal_ROI    = Input_Signal(Index_Signal_Window);
    
    % Sampling Rate
    Fs                  = 1/mean(diff(Time));
    
    % Location of Mouse click
    %Index_Location      = (Index_Signal_Window(1) + Index_Signal_Window(end) )/2

    % Plot the selected ROI 
    % subplot(2, 1, 1);
    segment             = plot(Time(Index_Signal_Window), ...
                                Input_Signal_ROI, '-k', 'LineWidth', 3);

    % Compute features of ROI
    New_features        = compute_features_of_ROI(...
                                    Input_Signal_ROI, ...
                                    signal_type, ...
                                    Index_Signal_Window, ...
                                    Fs);
    %New_features
    % Wait for the Key from the User
    pause();    
    
    [Add_features, Rem_features] ...
                        = intialize_features(signal_type);

    % Wait for the user input. 
    % If "Space" pressed, Confirm the newly identified R wave
    % If "Delete" pressed, delete the R wave in ROI
    % If "return" pressed, select the specifc point as R
    % wave
    currkey = get(gcf,'CurrentKey');

    
    if strcmp(currkey, 'space') || strcmp(currkey, 'return')     
        Add_features    = add_marker( Time, Input_Signal, signal_type, ...
                                            New_features, currkey, ...
                                            Index_Location, Add_features, ...
                                            Index_Signal_Window);
        fprintf('[-----]: New Location Added            = %d\n', ...
            size(Add_features.Max_Index(~isnan(Add_features.Max_Index)), 1));
        
    elseif ismac && strcmp(currkey, 'backspace') || strcmp(currkey, 'delete')
        Rem_features    = remove_marker( Time, Input_Signal, signal_type, ...
                                            New_features, Rem_features, ...
                                            Index_Detections_ROI, ...
                                            detections);
        fprintf('[-----]: Location removed              = %d\n', ...
            size(Rem_features.Max_Index(~isnan(Rem_features.Max_Index)), 1));
        
    elseif strcmp(currkey, 'escape')
        [xloc, ~, ~]    = ginput(2);
        Index_Detections_ROI = find(detections(:, 1) > xloc(1)*Fs & detections(:, 1) < xloc(2)*Fs);
        Rem_features    = remove_marker( Time, Input_Signal, signal_type, ...
                                            New_features, Rem_features, ...
                                            Index_Detections_ROI, ...
                                            detections);
        fprintf('[-----]: Location removed              = %d\n', ...
            size(Rem_features.Max_Index(~isnan(Rem_features.Max_Index)), 1));
        
    elseif strcmp(currkey, 'x')
        [~, yloc, ~]    = ginput(1);   
        switch signal_type
            case 'ECG'
                Index_Detections_ROI = find(...
                                (Time(detections(:, 1)) >= segment.Parent.XLim(1)) & ...
                                (Time(detections(:, 1)) <= segment.Parent.XLim(2)) & ...
                                Input_Signal(detections(:, 1)) < yloc ...
                                );
            case 'PPG'
                Index_Detections_ROI = find(...
                                        (Time(detections(:, 2)) >= segment.Parent.XLim(1)) & ...
                                        (Time(detections(:, 2)) <= segment.Parent.XLim(2)) & ...
                                        Input_Signal(detections(:, 2)) < yloc ...
                                        );
            otherwise
        end
        delete(segment);
        Rem_features    = remove_marker( Time, Input_Signal, signal_type, ...
                                            New_features, Rem_features, ...
                                            Index_Detections_ROI, ...
                                            detections);
        fprintf('[-----]: Location removed              = %d\n', ...
            size(Rem_features.Max_Index(~isnan(Rem_features.Max_Index)), 1));

    elseif strcmp(currkey, 'z')
        [~, yloc, ~]    = ginput(1);  
        switch signal_type
            case 'ECG'
                Index_Detections_ROI = find(...
                                        (Time(detections(:, 1)) >= segment.Parent.XLim(1)) & ...
                                        (Time(detections(:, 1)) <= segment.Parent.XLim(2)) & ...
                                        Input_Signal(detections(:, 1)) > yloc ...
                                        );
            case 'PPG'
                Index_Detections_ROI = find(...
                                        (Time(detections(:, 2)) >= segment.Parent.XLim(1)) & ...
                                        (Time(detections(:, 2)) <= segment.Parent.XLim(2)) & ...
                                        Input_Signal(detections(:, 2)) > yloc ...
                                        );
            otherwise
        end
        delete(segment);
        Rem_features    = remove_marker( Time, Input_Signal, signal_type, ...
                                            New_features, Rem_features, ...
                                            Index_Detections_ROI, ...
                                            detections);
        fprintf('[-----]: Location removed              = %d\n', ...
            size(Rem_features.Max_Index(~isnan(Rem_features.Max_Index)), 1));
        
    else
        fprintf('[-----]: Invaid Button Press space|return|delete to confirm/remove features\n');
        delete(segment);
        return
    end
    delete(segment);
    
    % Update the peak value locations
    detections 	= script_update_peak_locations(...
                            detections, ...
                            Add_features, ...
                            Rem_features, signal_type);
    
end